// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERED
  CANCELLED
}


//Modelo de la verdadedara base de datos
enum OrderState {
  DELIVERED
  NOT_DELIVERED
  RETURNED
}

model Invoice{
  id String @id @default(uuid())
  date DateTime
  tax Int
  discount Int
  subtotal Float
  total Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  InvoiceStore InvoiceStore[]
  Order Order[]
  //Relation to another class
  clientId String
}

model Order{
  id String @id @default(uuid())
  address String
  coordinate String
  deliveryTime DateTime
  orderState OrderState

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Invoice Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
  //Relations to another class
  clientId String
}



model Item{
  id String @id @default(uuid())
  productId String //TODO: Reviwew coorect Type
  amount Int
  individualValue Float
  totalValue Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //TODO: CHECK RELATIONS
  InvoiceStore InvoiceStore? @relation(fields: [invoiceStoreId], references: [id])
  invoiceStoreId String?
}

//NEW CLASS ADDED

model InvoiceStore{
  id String @id @default(uuid())
  date DateTime
  discount Float
  tax Float
  subtotal Float
  total Float


  //RELATIONS
  Item Item[]
  storeId String
  Invoice Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
}

