// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERED
  CANCELLED
}


model Order {
  id String @id @default(uuid())
  totalAmount Float
  totalItems Int
  status OrderStatus @default(PENDING)
  paid Boolean @default(false)
  paidAt DateTime?
  stripeChargeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrderItem OrderItem[]
  OrderReceipt OrderReceipt? //relacion 1 a 1 
}

model OrderItem {
  id String @id @default(uuid())
  productId Int 
  quantity Int
  price Float

  Order Order? @relation(fields: [orderId], references: [id])
  orderId String?
}

model OrderReceipt {
  id String @id @default(uuid())

  order Order @relation(fields: [orderId], references: [id])
  orderId String @unique
  receipUrl String
  createdAt DateTime @default(now())
  updateddAt DateTime @updatedAt
}

//Modelo de la verdadedara base de datos
enum OrderState {
  DELIVERED
  NOT_DELIVERED
  RETURNED
}

model Invoice{
  id String @id @default(uuid())
  date DateTime
  tax Int
  discount Int
  subtotal Float
  total Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //TODO: Add relations
  Item Item[]
  Order2 Order2[]
}

model Order2 {
  id String @id @default(uuid())
  address String
  coordinate String
  deliveryTime DateTime
  orderState OrderState

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // TODO: Add relations
  Invoice Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
}



model Item{
  id String @id @default(uuid())
  productId Int //TODO: Reviwew coorect Type
  amount Int
  individualValue Float
  totalValue Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //TODO: CHECK RELATIONS
  Invoice Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
}


